#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Customer {
    char name[81];
    int transactions;
    int items_purchased;
    float amount_paid;
};

typedef struct Customer customer;

void menu();
void printCustomers(customer *, int);
int countCustomers(FILE*);
void readTransactions(FILE*, customer*, int);
void heapify(customer*, int, int, int);
void heapSort(customer*, int, int);

int main() {
    FILE *inFile;
    int no_of_customers = 0;
    customer *customers;

    inFile = fopen("transactions.txt", "r");
    if (inFile == NULL) {
        printf("File could not be opened.\n");
        exit(1);
    }
    no_of_customers = countCustomers(inFile);
    printf("There are %d unique customers\n", no_of_customers);

    customers = (customer*) malloc(no_of_customers * sizeof(customer));
    fclose(inFile);
    inFile = fopen("transactions.txt", "r");
    if (inFile == NULL) {
        printf("File could not be opened.\n");
        exit(1);
    }

    readTransactions(inFile, customers, no_of_customers);

    if (customers == NULL) {
        printf("\nCustomers have NOT been read successfully!\n");
        exit(1);
    }
    printCustomers(customers, no_of_customers);

    char command = 0;
    int exit = 0;
    while (exit != 1) {
        menu();
        printf("\nCommand: ");
        fflush(stdin);
        scanf("%c", &command);

        if (command == '1' || command == '2' || command == '3' || command == '4') {
            heapSort(customers, no_of_customers, command - '0');
            printCustomers(customers, no_of_customers);
        }
        else if (command == '5') {
            exit = 1;
            printf("Goodbye!\n");
        }
        else {
            printf("Please enter a valid command!\n");
        }
    }
    free(customers);
    return 0;
}

void menu() {
    printf("Please choose one of the following options:\n"
           "(1) Display customers sorted by number of transactions\n"
           "(2) Display customers sorted by number of items purchased\n"
           "(3) Display customers sorted by total amount paid\n"
           "(4) Display customers sorted by average amount paid per transaction\n"
           "(5) Exit\n");
}

void printCustomers(customer* customers, int no_of_customers) {
    printf("List of customers:\n");
    for (int i = 0; i < no_of_customers; ++i) {
        printf("Name: %s, number of transactions = %d, number of items = %d, total amount paid = %.2f, average amount paid per transaction = %.2f\n",
               customers[i].name, customers[i].transactions, customers[i].items_purchased, customers[i].amount_paid,
               customers[i].amount_paid/customers[i].transactions);
    }
}

int countCustomers(FILE *inFile) {
    char c;
    int i = 0, j = 0, unique_customers = 0, repetition;
    while ((c = fgetc(inFile)) != EOF) {
        if (c == '\n')
            i++;
    }

    customer *customers_temp;
    customers_temp = (customer*) malloc(i * sizeof(customer));
    if (customers_temp == NULL) {
        printf("\nERROR!");
    }

    rewind(inFile);
    fscanf(inFile, "%*[^\n]\n");

    while (fscanf(inFile, "%[^;];%*[^\n]\n", customers_temp[j].name) != EOF && j < i) {
        j++;
    }

    for (int k = 0; k < i; k++) {
        repetition = 0;
        for (int l = 0; l < k; l++) {
            if (strcmp(customers_temp[k].name, customers_temp[l].name) == 0) {
                repetition = 1;
                break;
            }
        }
        if (!repetition) {
            unique_customers++;
        }
    }

    free(customers_temp);
    fclose(inFile);
    return unique_customers;
}

void readTransactions(FILE* inFile, customer* customers, int no_of_customers) {
    fscanf(inFile, "%*[^\n]\n");
    for (int k = 0; k < no_of_customers; k++) {
        strcpy(customers[k].name, "");
        customers[k].transactions = 0;
        customers[k].items_purchased = 0;
        customers[k].amount_paid = 0;
    }

    char name[100];
    int items_purchased;
    float amount_paid;

    while (fscanf(inFile, "%[^;];%*d;%*[^;];%*[^;];%d;%f;%*[^\n]\n", name, &items_purchased, &amount_paid) != EOF) {
        int found = 0;
        for (int l = 0; l < no_of_customers; l++) {
            if (strcmp(customers[l].name, name) == 0) {
                customers[l].transactions += 1;
                customers[l].items_purchased += items_purchased;
                customers[l].amount_paid += (amount_paid * items_purchased);
                found = 1;
                break;
            }
        }
        if (!found) {
            for (int l = 0; l < no_of_customers; l++) {
                if (strcmp(customers[l].name, "") == 0) {
                    strcpy(customers[l].name, name);
                    customers[l].transactions = 1;
                    customers[l].items_purchased = items_purchased;
                    customers[l].amount_paid = (amount_paid * customers[l].items_purchased);
                    break;
                }
            }
        }
    }
}

void heapify(customer* customers, int no_of_customers, int i, int criteria) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < no_of_customers) {
        if (criteria == 1 && customers[left].transactions > customers[largest].transactions)
            largest = left;
        else if (criteria == 2 && customers[left].items_purchased > customers[largest].items_purchased)
            largest = left;
        else if (criteria == 3 && customers[left].amount_paid > customers[largest].amount_paid)
            largest = left;
        else if (criteria == 4 && (customers[left].amount_paid / customers[left].transactions) > (customers[largest].amount_paid / customers[largest].transactions))
            largest = left;
    }

    if (right < no_of_customers) {
        if (criteria == 1 && customers[right].transactions > customers[largest].transactions)
            largest = right;
        else if (criteria == 2 && customers[right].items_purchased > customers[largest].items_purchased)
            largest = right;
        else if (criteria == 3 && customers[right].amount_paid > customers[largest].amount_paid)
            largest = right;
        else if (criteria == 4 && (customers[right].amount_paid / customers[right].transactions) > (customers[largest].amount_paid / customers[largest].transactions))
            largest = right;
    }

    if (largest != i) {
        customer temp = customers[i];
        customers[i] = customers[largest];
        customers[largest] = temp;
        heapify(customers, no_of_customers, largest, criteria);
    }
}

void heapSort(customer* customers, int no_of_customers, int criteria) {
    for (int i = no_of_customers / 2 - 1; i >= 0; i--) {
        heapify(customers, no_of_customers, i, criteria);
    }

    for (int i = no_of_customers - 1; i > 0; i--) {
        customer temp = customers[0];
        customers[0] = customers[i];
        customers[i] = temp;
        heapify(customers, i, 0, criteria);
    }
}
